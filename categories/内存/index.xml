<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>内存 on Q-song | 技术.生活.阅读.思考</title>
    <link>https://MU-GONG-SONG.github.io/blog/categories/%E5%86%85%E5%AD%98/</link>
    <description>Recent content in 内存 on Q-song | 技术.生活.阅读.思考</description>
    <generator>Hugo -- 0.151.0</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 14 Oct 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://MU-GONG-SONG.github.io/blog/categories/%E5%86%85%E5%AD%98/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>内存对齐（memory alignment）</title>
      <link>https://MU-GONG-SONG.github.io/blog/posts/memory_alignment/</link>
      <pubDate>Tue, 14 Oct 2025 00:00:00 +0000</pubDate>
      <guid>https://MU-GONG-SONG.github.io/blog/posts/memory_alignment/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;看起来很简单，但它其实是 为了内存对齐而存在的。&lt;/p&gt;&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type itab struct {
    inter *interfacetype // 接口类型信息
    _type *_type         // 实现接口的具体类型信息
    hash  uint32         // 类型 hash 值
    _     [4]byte
    fun   [1]uintptr     // 实现接口方法的函数地址
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;一go-的结构体内存布局规则&#34;&gt;一、Go 的结构体内存布局规则&lt;/h2&gt;
&lt;p&gt;Go 里每个字段在内存中都有一个偏移量（offset），而编译器会自动插入 padding（填充字节），以保证每个字段都按其类型对齐（alignment）。&lt;/p&gt;
&lt;p&gt;规则大致是：
每个字段的起始地址必须是该字段类型的对齐倍数。
比如：uint32 对齐要求 4 字节，uintptr（在 64 位机上）对齐要求 8 字节。
整个结构体的大小必须是其内部最大对齐单位的整数倍。
编译器自动插入 padding 字节，但有时源码里会显式加 _ [N]byte 来占位或兼容 ABI。&lt;/p&gt;
&lt;h2 id=&#34;二itab-的字段分析以-64-位架构为例&#34;&gt;二、itab 的字段分析（以 64 位架构为例）&lt;/h2&gt;
&lt;p&gt;我们来计算每个字段的内存偏移：
&lt;img loading=&#34;lazy&#34; src=&#34;.memory_alignment_images/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;三总结&#34;&gt;三、总结&lt;/h2&gt;
&lt;p&gt;_ [4]byte 实现对齐的机制这里的关键是：
_ [4]byte 本身不实现对齐，它的存在是作为填充（Padding），从而保证其后续字段 fun 的对齐。
1.目标：fun [1]uintptr 字段是一个 uintptr 数组，在 64 位系统上，uintptr 是 8 字节，所以它必须从一个 8 字节对齐的地址开始。
2.计算：&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
