<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>SQL on Q-song | 技术.生活.阅读.思考</title>
    <link>https://MU-GONG-SONG.github.io/blog/categories/sql/</link>
    <description>Recent content in SQL on Q-song | 技术.生活.阅读.思考</description>
    <generator>Hugo -- 0.151.2</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 12 Oct 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://MU-GONG-SONG.github.io/blog/categories/sql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SQL_Index 索引</title>
      <link>https://MU-GONG-SONG.github.io/blog/posts/</link>
      <pubDate>Sun, 12 Oct 2025 00:00:00 +0000</pubDate>
      <guid>https://MU-GONG-SONG.github.io/blog/posts/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;在 Go 后端开发中，我们通常使用 MySQL 或 PostgreSQL 等关系型数据库，索引设计的好坏直接决定了服务接口的响应速度。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;索引设计&#34;&gt;索引设计&lt;/h3&gt;
&lt;h4 id=&#34;a-选择合适的列作为索引&#34;&gt;a. 选择合适的列作为索引：&lt;/h4&gt;
&lt;p&gt;选择性高（High Selectivity）： 索引列的不重复值越多越好。例如，用户 ID（唯一）比性别（只有两三种值）更适合作为索引。
场景： 在设计用户服务时，user_id、email 等是理想的索引列。&lt;/p&gt;
&lt;p&gt;常用作查询条件（Where）： 经常出现在 WHERE 子句中的列，或者用于连接（JOIN）的列。&lt;/p&gt;
&lt;p&gt;排序/分组（Order By/Group By）： 经常用于排序或分组的列。&lt;/p&gt;
&lt;h4 id=&#34;b-考虑联合索引composite-index&#34;&gt;b. 考虑联合索引（Composite Index）：&lt;/h4&gt;
&lt;p&gt;最左前缀原则 (Leftmost Prefix Principle)： 这是联合索引设计的核心。如果创建了 (A, B, C) 的联合索引，它可以用于查询 WHERE A = ?、WHERE A = ? AND B = ?、WHERE A = ? AND B = ? AND C = ?，但不能单独用于 WHERE B = ? 或 WHERE C = ?。&lt;/p&gt;
&lt;p&gt;场景： 在设计订单查询接口时，如果经常查询 WHERE user_id = ? AND order_status = ?，应建立 (user_id, order_status) 的联合索引。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
