<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Q-song | 技术.生活.阅读.思考</title>
    <link>https://MU-GONG-SONG.github.io/blog/</link>
    <description>Recent content on Q-song | 技术.生活.阅读.思考</description>
    <generator>Hugo -- 0.151.0</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 14 Oct 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://MU-GONG-SONG.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Type Assertion 类型断言</title>
      <link>https://MU-GONG-SONG.github.io/blog/posts/type_assertion/</link>
      <pubDate>Tue, 14 Oct 2025 00:00:00 +0000</pubDate>
      <guid>https://MU-GONG-SONG.github.io/blog/posts/type_assertion/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;在 Go 语言中，类型断言（Type Assertion） 是一种用于从接口值中提取其底层具体类型的操作。它是 Go 实现多态和类型安全的重要机制之一。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;一基本语法&#34;&gt;一、基本语法&lt;/h2&gt;
&lt;p&gt;value, ok := interfaceVar.(ConcreteType)&lt;/p&gt;
&lt;p&gt;interfaceVar：一个接口类型的变量
ConcreteType：你期望它实际存储的具体类型（如 int, string, MyStruct 等）
value：如果断言成功，就是该类型的值
ok：布尔值，表示断言是否成功&lt;/p&gt;
&lt;h2 id=&#34;二为什么需要类型断言&#34;&gt;二、为什么需要类型断言？&lt;/h2&gt;
&lt;p&gt;Go 的接口（interface）可以存储任何类型的值，但当你想使用这个值的具体方法或字段时，就必须知道它的真实类型。&lt;/p&gt;
&lt;p&gt;var i interface{} = &amp;ldquo;hello&amp;rdquo;&lt;/p&gt;
&lt;p&gt;// 我知道它是 string，但接口本身不能直接调用 len()
s := i.(string)  // 类型断言：断言 i 是 string
fmt.Println(len(s))  // 现在可以了&lt;/p&gt;
&lt;h2 id=&#34;三两种写法&#34;&gt;三、两种写法&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;安全断言（推荐） —— 带 ok 判断&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
   s, ok := i.(string)
   if ok {
   fmt.Println(&amp;#34;字符串长度:&amp;#34;, len(s))
   } else {
   fmt.Println(&amp;#34;i 不是一个字符串&amp;#34;)
   }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;✅ 优点：不会 panic，适合不确定类型时使用。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;直接断言 —— 不检查 ok&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;   s := i.(string)  // 如果 i 不是 string，会 panic！
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;⚠️ 风险：如果类型不匹配，程序会崩溃（panic）。&lt;/p&gt;</description>
    </item>
    <item>
      <title>内存对齐（memory alignment）</title>
      <link>https://MU-GONG-SONG.github.io/blog/posts/memory_alignment/</link>
      <pubDate>Tue, 14 Oct 2025 00:00:00 +0000</pubDate>
      <guid>https://MU-GONG-SONG.github.io/blog/posts/memory_alignment/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;看起来很简单，但它其实是 为了内存对齐而存在的。&lt;/p&gt;&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type itab struct {
    inter *interfacetype // 接口类型信息
    _type *_type         // 实现接口的具体类型信息
    hash  uint32         // 类型 hash 值
    _     [4]byte
    fun   [1]uintptr     // 实现接口方法的函数地址
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;一go-的结构体内存布局规则&#34;&gt;一、Go 的结构体内存布局规则&lt;/h2&gt;
&lt;p&gt;Go 里每个字段在内存中都有一个偏移量（offset），而编译器会自动插入 padding（填充字节），以保证每个字段都按其类型对齐（alignment）。&lt;/p&gt;
&lt;p&gt;规则大致是：
每个字段的起始地址必须是该字段类型的对齐倍数。
比如：uint32 对齐要求 4 字节，uintptr（在 64 位机上）对齐要求 8 字节。
整个结构体的大小必须是其内部最大对齐单位的整数倍。
编译器自动插入 padding 字节，但有时源码里会显式加 _ [N]byte 来占位或兼容 ABI。&lt;/p&gt;
&lt;h2 id=&#34;二itab-的字段分析以-64-位架构为例&#34;&gt;二、itab 的字段分析（以 64 位架构为例）&lt;/h2&gt;
&lt;p&gt;我们来计算每个字段的内存偏移：
&lt;img loading=&#34;lazy&#34; src=&#34;.memory_alignment_images/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;三总结&#34;&gt;三、总结&lt;/h2&gt;
&lt;p&gt;_ [4]byte 实现对齐的机制这里的关键是：
_ [4]byte 本身不实现对齐，它的存在是作为填充（Padding），从而保证其后续字段 fun 的对齐。
1.目标：fun [1]uintptr 字段是一个 uintptr 数组，在 64 位系统上，uintptr 是 8 字节，所以它必须从一个 8 字节对齐的地址开始。
2.计算：&lt;/p&gt;</description>
    </item>
    <item>
      <title>初识 Hugo：打造你的静态博客</title>
      <link>https://MU-GONG-SONG.github.io/blog/posts/%E5%88%9D%E8%AF%86-hugo%E6%89%93%E9%80%A0%E4%BD%A0%E7%9A%84%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Sun, 12 Oct 2025 15:30:00 +0800</pubDate>
      <guid>https://MU-GONG-SONG.github.io/blog/posts/%E5%88%9D%E8%AF%86-hugo%E6%89%93%E9%80%A0%E4%BD%A0%E7%9A%84%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</guid>
      <description>介绍 Hugo 的基本概念、安装和创建第一篇文章的流程。</description>
    </item>
    <item>
      <title>About — 关于我</title>
      <link>https://MU-GONG-SONG.github.io/blog/about/</link>
      <pubDate>Sun, 12 Oct 2025 12:00:00 +0800</pubDate>
      <guid>https://MU-GONG-SONG.github.io/blog/about/</guid>
      <description>关于我的简单介绍、联系方式和创作理念。</description>
    </item>
    <item>
      <title>我的第一篇博客</title>
      <link>https://MU-GONG-SONG.github.io/blog/posts/fist-blog/</link>
      <pubDate>Sun, 12 Oct 2025 00:00:00 +0000</pubDate>
      <guid>https://MU-GONG-SONG.github.io/blog/posts/fist-blog/</guid>
      <description>&lt;p&gt;今天开始记录我在 Go 高并发项目中的一些心得体会。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
